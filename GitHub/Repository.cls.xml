<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="GitHub.Repository">
<Description>
This class contain information about repositories</Description>
<Super>%Persistent</Super>
<TimeCreated>63909,2460.601555</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="Name">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Property name="Commits">
<Type>GitHub.Commit</Type>
<Cardinality>many</Cardinality>
<Inverse>Repository</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="HistoryViews">
<Type>History.Views</Type>
<Cardinality>many</Cardinality>
<Inverse>Repository</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="HistoryClones">
<Type>History.Clones</Type>
<Cardinality>many</Cardinality>
<Inverse>Repository</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Organization">
<Type>GitHub.Organization</Type>
<Cardinality>one</Cardinality>
<Inverse>Repositories</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
<OnDelete>cascade</OnDelete>
</Property>

<Property name="Type">
<Type>%String</Type>
</Property>

<Property name="Stars">
<Type>%Integer</Type>
</Property>

<Property name="Forks">
<Type>%Integer</Type>
</Property>

<Property name="Link">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="IssuesOpened">
<Type>%Integer</Type>
</Property>

<Property name="Description">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Updated">
<Type>%TimeStamp</Type>
</Property>

<Property name="Pushed">
<Type>%TimeStamp</Type>
</Property>

<Property name="Created">
<Type>%TimeStamp</Type>
</Property>

<Property name="CommitsAmount">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> set {*} = ##class(GitHub.Repository).GetCommitsAmount({Name})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Method name="GetCommitsAmount">
<ClassMethod>1</ClassMethod>
<FormalSpec>name</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set sql = "Select Count(Id) As CommitsAmount From GitHub.CommitTable Where Repository->Name = ? "
	set rs = ##class(%SQL.Statement).%ExecDirect(,sql, name)
	if rs.%Next() {set result = rs.CommitsAmount}
	Quit result
]]></Implementation>
</Method>

<Method name="InsertOrUpdate">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&data,&listToUpdate]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set num = 1, sc = 1
	while $data(data(num,"Name")){
		
		if ##class(GitHub.Repository).NameExists( data(num,"Name"), .repositoryId ){
			set sc = ##class(GitHub.Repository).Update(.data, num, repositoryId) Quit:'sc
			
			set sc = ##class(History.Repositories).Insert(data(num,"Name"),data(num,"Link"),data("Organization"),0) Quit:'sc

			set num = num + 1
			Continue
			}
		
		set sc = ##class(GitHub.Repository).Insert(.data, num) Quit:'sc
		
		set numToUpdate = listToUpdate("Amount") + 1
		set listToUpdate(numToUpdate,"Name") = data(num,"Name")
		,listToUpdate(numToUpdate,"Id") = data
		,listToUpdate("Amount") = listToUpdate("Amount") + 1

		set sc = ##class(History.Repositories).Insert(data(num,"Name"),data(num,"Link"),data("Organization"),1) Quit:'sc

		set num = num + 1
		}
	
	Quit sc
]]></Implementation>
</Method>

<Method name="Insert">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&data="",num:%Integer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tmpName = data(num,"Name"), tmpDescription = data(num,"Description")
	, tmpForks = data(num,"Forks"), tmpIssuesOpened = data(num,"IssuesOpened")
	, tmpLink = data(num,"Link"), tmpStars = data(num,"Stars")
	, tmpType = data(num,"Type"), tmpUpdated = data(num,"Updated")
	, tmpCreated = data(num,"Created"), tmpPushed = data(num,"Pushed")	
	&sql(
		Insert Into GitHub.Repository (Organization,Name,Description,Forks,IssuesOpened,Link,Stars,Type,Updated,Created,Pushed)
		Values (
			:data("Organization"), :tmpName, :tmpDescription, :tmpForks, :tmpIssuesOpened
			, :tmpLink, :tmpStars, :tmpType, :tmpUpdated, :tmpCreated, :tmpPushed
		)
	)
	if SQLCODE=0 {
		set data = %ROWID Quit 1	
	}
	
	Quit 'SQLCODE
]]></Implementation>
</Method>

<Method name="Update">
<Description>
Created,Forks,IssuesOpened,Pushed,Updated,Stars</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&data,num,repositoryId]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tmpForks = data(num,"Forks"), tmpIssuesOpened = data(num,"IssuesOpened")
	, tmpStars = data(num,"Stars"), tmpUpdated = data(num,"Updated")
	, tmpCreated = data(num,"Created"), tmpPushed = data(num,"Pushed")	
	
	&sql( Update GitHub.Repository 
		Set Created = :tmpCreated, Updated = :tmpUpdated, Pushed = :tmpPushed
		, Forks = :tmpForks, IssuesOpened = :tmpIssuesOpened, Stars = :tmpStars
		Where Id =:repositoryId 
	)
	Q:SQLCODE=0 1
	Q $$$ERROR($$$GeneralError,$system.SQL.SQLCODE(SQLCODE))
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GitHub.RepositoryD</DataLocation>
<DefaultData>RepositoryDefaultData</DefaultData>
<IdLocation>^GitHub.RepositoryD</IdLocation>
<IndexLocation>^GitHub.RepositoryI</IndexLocation>
<StreamLocation>^GitHub.RepositoryS</StreamLocation>
<Data name="RepositoryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Organization</Value>
</Value>
<Value name="4">
<Value>Type</Value>
</Value>
<Value name="5">
<Value>Stars</Value>
</Value>
<Value name="6">
<Value>Forks</Value>
</Value>
<Value name="7">
<Value>Link</Value>
</Value>
<Value name="8">
<Value>IssuesOpened</Value>
</Value>
<Value name="9">
<Value>Description</Value>
</Value>
<Value name="10">
<Value>Updated</Value>
</Value>
<Value name="11">
<Value>Pushed</Value>
</Value>
<Value name="12">
<Value>Created</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
