<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="GitHub.ActivityData">
<Super>%RegisteredObject</Super>
<TimeCreated>63916,69358.6097</TimeCreated>

<Property name="request">
<Type>%Net.HttpRequest</Type>
</Property>

<Method name="CreateLoggedSession">
<ClassMethod>1</ClassMethod>
<FormalSpec>login="",password=""</FormalSpec>
<ReturnType>GitHub.ActivityData</ReturnType>
<Implementation><![CDATA[
	set activityRequest = ##class(GitHub.ActivityData).%New()
	set activityRequest.request = ##class(%Net.HttpRequest).%New()
	
	set sslConfigName = "github.com"
	set activityRequest.request.Server = sslConfigName
	set sc = ##class(SSL.Configuration).SSLConfig( sslConfigName ) if 'sc {
		write !, "SSLConfig error: ", sc 	
	}
	set activityRequest.request.SSLConfiguration = sslConfigName
	set activityRequest.request.Https=1
	
	set sc = activityRequest.request.Get("/login")
	set strm = ##class(%Stream.FileCharacter).%New()
	set sc = strm.CopyFrom( activityRequest.request.HttpResponse.Data )
	
	set authenticityToken = ##class(GitHub.ActivityData).ParseAuthenticityToken(strm)
	
	do activityRequest.request.InsertFormData("commit","Sign in")
	, activityRequest.request.InsertFormData("login",login), activityRequest.request.InsertFormData("password",password)
	, activityRequest.request.InsertFormData("authenticity_token",authenticityToken)
	, activityRequest.request.InsertFormData("utf8","&#x2713;")
	set sc = activityRequest.request.Post("/session") 
	
	if activityRequest.request.HttpResponse.StatusCode'=302{
		write "Login or password are incorrect."
		Q 0
		}
	Quit activityRequest
]]></Implementation>
</Method>

<Method name="ParseAuthenticityToken">
<Description><![CDATA[
Extract authenticity token
Code below is one line
<!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/session" 
data-form-nonce="6c0fdd0779b0e7e75813fed57e639c50034bcc0f" method="post"><div style="margin:0;padding:0;display:inline">
<input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" 
value="CLpoy4KS/Nbnn4uyTd/vf/WuhcF8NOhU4QSualOfABlYzSIp2f6nEBDozj5y05hYuiGJRS6fr1/TN9SEbouO4Q==" /></div>      ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>html</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set begin = html.FindAt( 1, "name=""authenticity_token""" ) 
	set end = html.FindAt( begin , "</div>"  )
	set sc = html.MoveTo( begin ) 
	set length = end - begin
	set authTokenHtml = html.Read( .length )
	
	set authToken = $piece( authTokenHtml, "value=""", 2 )	
	set authToken = $piece( authToken, """")
	Quit authToken
]]></Implementation>
</Method>

<Method name="GetActivityData">
<FormalSpec><![CDATA[activityUrl:%String,organizationName:%String,repositoryName:%String,&objectZen]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = ..request.SetHeader("x-requested-with","XMLHttpRequest")
	set st = ..request.Get("/"_organizationName_"/"_repositoryName_activityUrl)
    set st1 = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(..request.HttpResponse.Data,,.objectZen,1)
    set st = $$$ADDSC(st, st1)
    
	Quit:st st
	Quit "html"
]]></Implementation>
</Method>

<Method name="ParseHistory">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&history,objectZen]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	for i=1:1:objectZen.counts.Count() {
	    set historyData = objectZen.counts.GetAt(i)
		set history(i,"Date") = historyData.bucket
		,history(i,"Total") = historyData.total, history(i,"Unique") = historyData.unique
	}
	Quit 1
]]></Implementation>
</Method>

<Method name="SetOrIgnoreViewsHistory">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&views,&repository]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sql = "Select Top 1 DateOfData, Id From History.Views Where Repository = ? Order By DateOfData Desc"
	set rs = ##class(%SQL.Statement).%ExecDirect(,sql, repository("Id"))
	if rs.%Next() {
		set top = rs.DateOfData, topId = rs.Id
		}
	set topDate = $zdh($piece(top," ",1),3)
	set start = 4070908800, secondsPerDay = 86400
	
	set num = 1
	while $data(views(num,"Date")){
		set tmpDate = (start+views(num,"Date"))\secondsPerDay
		if (tmpDate=topDate) {
			set sc = ##class(History.Views).Update(topId,views(num,"Total"),views(num,"Unique"))
			kill views(num,"Date") 
			Quit}
		set num = num + 1
		}
	set sc = ##class(GitHub.ActivityData).SetViewsHistory(.views,.repository) 
	Quit sc
]]></Implementation>
</Method>

<Method name="SetViewsHistory">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&views,&repository]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set views("RepositoryId") = repository("Id")
	set sc = ##class(History.Views).Insert(.views)
	
	write:sc !,"History of views successfuly loaded"
	Quit sc
]]></Implementation>
</Method>

<Method name="SetOrIgnoreClonesHistory">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&clones,&repository]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sql = "Select Top 1 DateOfData, Id From History.Clones Where Repository = ? Order By DateOfData Desc"
	set rs = ##class(%SQL.Statement).%ExecDirect(,sql, repository("Id"))
	if rs.%Next() {
		set top = rs.DateOfData, topId = rs.Id
		}
	set topDate = $zdh($piece(top," ",1),3)
	set start = 4070908800, secondsPerDay = 86400

	set num = 1
	while $data(clones(num,"Date")){
		set tmpDate = (start+clones(num,"Date"))\secondsPerDay
		if (tmpDate=topDate) {
			set sc = ##class(History.Clones).Update(topId,clones(num,"Total"))
			kill clones(num,"Date") 
			Quit}
		set num = num + 1
		}
	set sc = ##class(GitHub.ActivityData).SetClonesHistory(.clones,.repository) 
	Quit sc
]]></Implementation>
</Method>

<Method name="SetClonesHistory">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&clones,&repository]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set clones("RepositoryId") = repository("Id")
	set sc = ##class(History.Clones).Insert(.clones)
	
	write:sc !,"History of clones successfuly loaded",!
	Quit sc
]]></Implementation>
</Method>
</Class>
</Export>
