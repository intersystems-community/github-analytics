<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="GitHub.RepositoryDetailsLoader">
<Super>GitHub.RepositoryPage</Super>
<TimeCreated>63913,80677.246571</TimeCreated>

<Method name="Load">
<Description><![CDATA[
Load detail information of repository with Name <var>data("Repository")</var>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[organization,&session]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..Scan(organization,.session)
]]></Implementation>
</Method>

<Method name="Scan">
<Description>
scan all organization's repository pages</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[organization,&session]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set page = ..GetPage(organization,,.sc,.session ) Quit:'sc sc

	set sql = "Select Name From GitHub.Repository Where Organization->Name = ? "
	set rs = ##class(%SQL.Statement).%ExecDirect(,sql, organization)
	set sc = 1, num = 0
	while rs.%Next(){
		set num = num + 1
		set repository = rs.Name
		write !,num,".Repository ", repository
		
		set sc = page.Get(organization, repository) ;load repository page
		set sc = page.ParseDetailInfo()
		if sc="Empty repo"{
			write " - Empty repository."
			set sc = 1
			Continue
			}
		Quit:'sc 
		
		#; Adding history
		Quit:'##class(GitHub.Repository).NameExists( page.Repository, .repositoryId )
		#; Commits
		set sc = page.GetActivityData("/graphs/commit-activity-data", .commitsHistoryHtml)
		if sc = "html"{
			write !, "Have no access to history of commits data"
			set sc = 1
			}
		else{
			set sc = ##class(History.Commits).ParseCommitsHistory(commitsHistoryHtml, .data)
			
			set data("RepositoryId") = repositoryId
			set sc = ##class(History.Commits).Insert(.data)
			
			write:sc !,"History of commits successfuly loaded"
			Quit:'sc
			}
			
		#; Views
		set sc = page.GetActivityData("/graphs/traffic-data", .viewsHistoryHtml)
		if sc = "html"{
			write !, "Have no access to history of views and clones data"
			set sc = 1
			Continue
			}
		else{
			set sc = ##class(History.Views).ParseViewsHistory(viewsHistoryHtml, .data)
			
			set data("RepositoryId") = repositoryId
			set sc = ##class(History.Views).Insert(.data)
			
			write:sc !,"History of views successfuly loaded"
			Quit:'sc
			}
			
		#; Clones
		set sc = page.GetActivityData("/graphs/clone-activity-data", .clonesHistoryHtml) Quit:'sc
		
		set sc = ##class(History.Clones).ParseClonesHistory(clonesHistoryHtml, .data)
		
		set data("RepositoryId") = repositoryId
		set sc = ##class(History.Clones).Insert(.data)
		
		write:sc !,"History of clones successfuly loaded"
		Quit:'sc
		}
	
	Quit sc
]]></Implementation>
</Method>

<Method name="GetActivityData">
<FormalSpec><![CDATA[activityUrl:%String,&html]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = ..request.SetHeader("x-requested-with","XMLHttpRequest")
	set sc = ..request.Get(..Url()_activityUrl)
	set tmpStrm = ##class(%Stream.FileCharacter).%New()
	set sc = tmpStrm.CopyFrom( ..request.HttpResponse.Data )
	set html = tmpStrm.Read()
	Quit:$find(html,"<!DOCTYPE html>") "html"
	kill tmpStrm
	Quit sc
]]></Implementation>
</Method>

<Method name="OnDetailInfo">
<Description><![CDATA[
Event handler 
<var>data</var> - key-value array with repository's detail properties 
If handler return 0, parsing will be interrupted]]></Description>
<FormalSpec><![CDATA[&data]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit:'##class(GitHub.Repository).NameExists( ..Repository, .repositoryId ) 0
	set data("Id") = repositoryId
	set sc = ##class(GitHub.Repository).UpdateFromRepositoryPage( .data ) Quit:'sc sc
	write "." 
	Quit sc
]]></Implementation>
</Method>
</Class>
</Export>
